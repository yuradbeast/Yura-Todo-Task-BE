{"version":3,"sources":["helpers/authHeader.ts","features/todo/todoListSlice.ts","features/login/loginSlice.ts","features/login/components/Login.tsx","helpers/history.js","features/todo/components/createNewTask/CreateNewTask.tsx","features/todo/components/todoItem/TodoItem.tsx","features/todo/components/TodoList.tsx","App.tsx","app/store.ts","serviceWorker.js","index.js","features/login/components/login.module.css","features/todo/components/createNewTask/createNewTask.module.css","features/todo/components/todoItem/todoItem.module.css","features/todo/components/todoList.module.css"],"names":["authHeader","user","JSON","parse","localStorage","getItem","accessToken","Authorization","todoListSlice","createSlice","name","initialState","taskMap","reducers","setTaskMap","state","action","payload","actions","selectTaskMap","todo","loginSlice","serverSideErrorMessage","setUser","setServerSideErrorMessage","signIn","credentials","dispatch","signInUrl","LOGIN_BASE_URL","axios","post","then","response","onSuccessfulSignIn","catch","error","data","message","userData","setItem","stringify","selectUser","login","selectServerSideErrorMessage","Login","useSelector","useDispatch","useState","username","password","setCredentials","inputErrors","setInputsErrors","handleSignUp","passwordInputErrors","errors","length","push","search","getPasswordInputErrors","usernameInputErrors","getUsernameInputErrors","_","validateCredentials","signUp","handleCredentialsInput","fieldName","input","includes","copyOfCredentials","getErrorElementsByField","field","index","getErrorElement","id","className","styles","errorMessage","classNames","loginContainer","value","onChange","e","target","type","htmlFor","signInUpContainer","onClick","history","createBrowserHistory","CreateNewTask","props","title","done","newTaskFields","setNewTaskFields","handleNewTaskFieldsInputs","copyOfNewTaskFields","handleSubmit","task","currentDate","moment","utcOffset","format","objectToSubmit","date","modified","getState","a","url","TODO_BASE_URL","headers","newTaskItem","copyOfTodoMap","console","alert","isOpen","container","textAreaContainer","placeholder","doneCheckBox","checked","TodoItem","taskItem","editObject","setEditObject","handleUpdate","copyOfEditObj","newTask","getTimeDisplayFormat","time","tz","guess","submitDisabled","classname","backgroundTaskItem","text","copyOfEditObject","handleTextEdit","rows","disabled","doneAndDeleteContainer","taskId","delete","prettySortNames","TodoList","order","orderBy","setOrderBy","isCreatingNewTask","setIsCreatingNewTask","useEffect","get","handleSignOut","removeItem","handleDeleteAll","getSortDropDown","handleOrderChange","key","copyOfOrderBy","sortDropDownContainer","content","position","Position","RIGHT_TOP","sortByFieldButton","icon","inline","selectedValue","label","marginRight7","BASE_UI_URL","window","location","host","BASE_BACKEND_URL","App","urlHome","URL","pathname","urlLogin","exact","path","component","reducer","preloadedState","configureStore","Boolean","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.16e68ad2.chunk.js","sourcesContent":["export default function authHeader() {\r\n    const user = JSON.parse(localStorage.getItem(\"user\") || \"{}\");\r\n    if (user && user.accessToken) {\r\n        return { Authorization: \"Bearer \" + user.accessToken };\r\n        // return { auth: user.accessToken };\r\n\r\n    } else {\r\n        return {};\r\n    }\r\n}\r\n","import {createSlice} from '@reduxjs/toolkit';\r\nimport {Dispatch} from \"redux\";\r\nimport axios, {AxiosResponse} from \"axios\";\r\nimport authHeader from \"../../helpers/authHeader\";\r\nimport {ResponseTaskItem, TaskItem, TaskMap} from \"./todoInterfaces\";\r\nimport {FullState} from \"../../app/store\";\r\nimport {BASE_BACKEND_URL, TODO_BASE_URL} from \"../../App\";\r\n\r\nexport const todoListSlice = createSlice({\r\n    name: 'counter',\r\n    initialState: {\r\n        taskMap: {}\r\n    },\r\n    reducers: {\r\n        setTaskMap: (state, action) => {\r\n            state.taskMap = action.payload\r\n        }\r\n    },\r\n});\r\n\r\nexport const {setTaskMap} = todoListSlice.actions;\r\n\r\n\r\n\r\nexport const fetchAllTasks = () => (dispatch: Dispatch<any>) => {\r\n    const url = TODO_BASE_URL + \"/allTasks\";\r\n    axios.get(url, {headers: authHeader()})\r\n        .then((response: AxiosResponse<TaskMap>) => {\r\n            const taskMap: TaskMap = response.data;\r\n            dispatch(setTaskMap(taskMap))\r\n        }).catch(error => {\r\n        console.error(\"Error: \" + error);\r\n        alert(\"Failed to fetch data\");\r\n    })\r\n};\r\n\r\nexport const createTask = (task: TaskItem) => async (dispatch: Dispatch<any>, getState: () => FullState) => {\r\n    const url = TODO_BASE_URL + \"/createTask\";\r\n    axios.post(url, task, {headers: authHeader()})\r\n        .then((response: AxiosResponse<ResponseTaskItem>) => {\r\n            const newTaskItem: ResponseTaskItem = response.data;\r\n            const copyOfTodoMap = {[newTaskItem.id]: newTaskItem, ...getState().todo.taskMap,};\r\n            dispatch(setTaskMap(copyOfTodoMap));\r\n        }).catch(error => {\r\n        console.error(\"Error: \" + error);\r\n        alert(\"Failed to create task\");\r\n    })\r\n};\r\n\r\nexport const updateTask = (task: TaskItem) => (dispatch: Dispatch<any>, getState: () => FullState) => {\r\n    const url = TODO_BASE_URL + \"/updateTask\";\r\n    axios.post(url, task, {headers: authHeader()})\r\n        .then((response: AxiosResponse<ResponseTaskItem>) => {\r\n            const newTask: ResponseTaskItem = response.data;\r\n            const copyOfTodoMap = {...getState().todo.taskMap, [newTask.id]: response.data};\r\n            dispatch(setTaskMap(copyOfTodoMap))\r\n        }).catch(error => {\r\n        console.error(\"Error: \" + error);\r\n        alert(\"Failed to update task\");\r\n    })\r\n};\r\n\r\nexport const deleteTask = (taskId: string) => (dispatch: Dispatch<any>, getState: () => FullState) => {\r\n    const url = TODO_BASE_URL + \"/deleteTask?taskId=\" + taskId;\r\n    axios.delete(url, {headers: authHeader()})\r\n        .then(() => {\r\n            const copyOfTodoMap = {...getState().todo.taskMap};\r\n            delete copyOfTodoMap[taskId]\r\n            dispatch(setTaskMap(copyOfTodoMap))\r\n        }).catch(error => {\r\n        console.error(\"Error: \" + error);\r\n        alert(\"Failed to delete task\");\r\n    })\r\n};\r\n\r\nexport const deleteAllTasks = () => (dispatch: Dispatch<any>) => {\r\n    const url = TODO_BASE_URL + \"/deleteAllTasks\";\r\n    axios.delete(url, {headers: authHeader()})\r\n        .then(() => {\r\n            dispatch(setTaskMap({}))\r\n        }).catch(error => {\r\n        console.error(\"Error: \" + error);\r\n        alert(\"Failed to delete task\");\r\n    })\r\n};\r\n\r\nexport const selectTaskMap = (state: FullState) => state.todo.taskMap;\r\n\r\nexport default todoListSlice.reducer;\r\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {Credentials, User} from \"./loginIntefaces\";\r\n\r\nimport axios, {AxiosResponse} from 'axios';\r\nimport {Dispatch} from 'redux';\r\nimport {FullState} from \"../../app/store\";\r\nimport {todoListSlice} from \"../todo/todoListSlice\";\r\nimport {BASE_BACKEND_URL, LOGIN_BASE_URL} from \"../../App\";\r\n\r\n\r\nexport const loginSlice = createSlice({\r\n    name: 'counter',\r\n    initialState: {\r\n        user: {},\r\n        serverSideErrorMessage: \"\"\r\n    },\r\n    reducers: {\r\n        setUser: (state, action: PayloadAction<User | {}>) => {\r\n            state.user = action.payload;\r\n        },\r\n        setServerSideErrorMessage: (state, action: PayloadAction<string>) => {\r\n            state.serverSideErrorMessage = action.payload;\r\n        }\r\n\r\n    },\r\n});\r\n\r\nexport const {setUser, setServerSideErrorMessage} = loginSlice.actions;\r\n\r\nexport const signOut = () => (dispatch: Dispatch) => {\r\n    localStorage.removeItem(\"user\");\r\n    dispatch(loginSlice.actions.setUser({}))\r\n    dispatch(todoListSlice.actions.setTaskMap({}))\r\n};\r\n\r\n\r\nexport const signIn = (credentials: Credentials) => (dispatch: Dispatch<any>) => {\r\n    const signInUrl = LOGIN_BASE_URL + \"/signin\";\r\n    axios.post(signInUrl, credentials).then((response: AxiosResponse<User>) => {\r\n        dispatch(onSuccessfulSignIn(response))\r\n    }).catch(error => {\r\n        dispatch(setServerSideErrorMessage(error.response.data.message));\r\n    })\r\n};\r\n\r\nconst onSuccessfulSignIn = (response: AxiosResponse<User>) => (dispatch: Dispatch) => {\r\n    const userData: User = response.data;\r\n    localStorage.setItem(\"user\", JSON.stringify(userData));\r\n    dispatch(setUser(userData))\r\n    dispatch(setServerSideErrorMessage(\"\"));\r\n}\r\n\r\nexport const signUp = (credentials: Credentials) => (dispatch: Dispatch<any>) => {\r\n    const signInUrl = LOGIN_BASE_URL + \"/signup\";\r\n    axios.post(signInUrl, credentials).then(() => {\r\n        dispatch(signIn(credentials));\r\n        dispatch(loginSlice.actions.setServerSideErrorMessage(\"\"));\r\n    }).catch(() => {\r\n        dispatch(setServerSideErrorMessage(\"failed to signUp\"));\r\n    })\r\n};\r\n\r\n\r\nexport const selectUser = (state: FullState) => state.login.user;\r\nexport const selectServerSideErrorMessage = (state: FullState) => state.login.serverSideErrorMessage;\r\n\r\nexport default loginSlice.reducer;\r\n","import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport styles from './login.module.css';\r\nimport {selectServerSideErrorMessage, signIn, signUp} from \"../loginSlice\";\r\nimport {Credentials} from \"../loginIntefaces\";\r\nimport * as _ from \"lodash\";\r\nimport classNames from 'classnames'\r\n\r\n\r\ntype InputErrors = {\r\n    username: string[],\r\n    password: string[]\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n    const serverSideErrorMessage = useSelector(selectServerSideErrorMessage);\r\n    const dispatch = useDispatch();\r\n    const [credentials, setCredentials] = useState<Credentials>({username: \"\", password: \"\"});\r\n    const [inputErrors, setInputsErrors] = useState<InputErrors>({username: [], password: []});\r\n\r\n\r\n    const handleSignIn = () => {\r\n        dispatch(signIn(credentials))\r\n\r\n    }\r\n\r\n\r\n    const getUsernameInputErrors = (username): string[] => {\r\n        const errors: string[] = [];\r\n        if (username.length < 4 || username.length > 13) {\r\n            errors.push(\"Username must be at between 4 and 12 characters\");\r\n        }\r\n        if (username.search(/^[a-zA-Z0-9]*$/) < 0) {\r\n            errors.push(\"Username must start with english latter and can only contain numbers and letters\");\r\n        }\r\n        return errors;\r\n    }\r\n\r\n\r\n    const getPasswordInputErrors = (password): string[] => {\r\n        const errors: string[] = [];\r\n        if (password.length < 4) {\r\n            errors.push(\"Your password must be at least 6 characters\");\r\n        }\r\n        if (password.search(/[a-z]/i) < 0) {\r\n            errors.push(\"Your password must contain at least one letter.\");\r\n        }\r\n        if (password.search(/[0-9]/) < 0) {\r\n            errors.push(\"Your password must contain at least one digit.\");\r\n        }\r\n        return errors;\r\n    }\r\n\r\n    const validateCredentials = (): boolean => {\r\n        const passwordInputErrors = getPasswordInputErrors(credentials.password);\r\n        const usernameInputErrors = getUsernameInputErrors(credentials.username);\r\n\r\n        const newErrorsObject: InputErrors = {\r\n            password: passwordInputErrors,\r\n            username: usernameInputErrors\r\n        }\r\n        setInputsErrors(newErrorsObject);\r\n        return _.isEmpty(passwordInputErrors) && _.isEmpty(usernameInputErrors);\r\n    }\r\n\r\n    const handleSignUp = () => {\r\n        if (validateCredentials()) {\r\n            dispatch(signUp(credentials))\r\n        }\r\n    }\r\n\r\n\r\n    const handleCredentialsInput = (fieldName: string, input: string) => {\r\n        if (input.includes(\" \")) {\r\n            return;\r\n        }\r\n        const copyOfCredentials: Credentials = {...credentials};\r\n        copyOfCredentials[fieldName] = input;\r\n        setCredentials(copyOfCredentials)\r\n    }\r\n\r\n    const getErrorElementsByField = (field) => {\r\n        return _.map(inputErrors[field], (error, index) => {\r\n                const id = \"error_element_\" + field + \"_\" + index;\r\n                return getErrorElement(error, id);\r\n            }\r\n        )\r\n    }\r\n\r\n    const getErrorElement = (error, id: string) => {\r\n        return <div id={id} key={id} className={styles.errorMessage}>\r\n            {error}\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className={classNames(\"container-fluid card p-3\" , styles.loginContainer)}>\r\n            <div>\r\n                <div>\r\n                    <label>Username</label>\r\n                    <input value={credentials.username}\r\n                           onChange={e => handleCredentialsInput(\"username\", e.target.value)} type=\"text\"\r\n                           className=\"form-control\" id=\"userNameField\"/>\r\n                    {!_.isEmpty(inputErrors.username) && getErrorElementsByField(\"username\")}\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">Password</label>\r\n                    <input value={credentials.password}\r\n                           onChange={e => handleCredentialsInput(\"password\", e.target.value)} type=\"password\"\r\n                           className=\"form-control\" id=\"exampleInputPassword1\"/>\r\n                    {!_.isEmpty(inputErrors.password) && getErrorElementsByField(\"password\")}\r\n                </div>\r\n                {getErrorElement(serverSideErrorMessage, \"serverSideError\")}\r\n            </div>\r\n            <div className={styles.signInUpContainer}>\r\n                <button onClick={() => handleSignIn()} className=\"btn-sm btn-primary m-3\">Sign In</button>\r\n                <button onClick={() => handleSignUp()} className=\"btn-sm btn-primary m-3\">Sign Up</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import {createBrowserHistory} from \"history\";\r\n\r\nexport const history = createBrowserHistory();\r\n","import React, {useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport styles from './createNewTask.module.css';\r\nimport {NewTask, TaskItem} from \"../../todoInterfaces\";\r\nimport moment from 'moment-timezone'\r\nimport {createTask} from \"../../todoListSlice\";\r\nimport classNames from 'classnames'\r\n\r\n\r\ntype CreateNewTaskProps = {\r\n    isOpen: boolean\r\n}\r\n\r\nexport const CreateNewTask = (props: CreateNewTaskProps) => {\r\n    const dispatch = useDispatch();\r\n    const [newTaskFields, setNewTaskFields] = useState<NewTask>({\r\n        title: \"\",\r\n        done: false\r\n    });\r\n\r\n\r\n    const handleNewTaskFieldsInputs = (fieldName: string, input: string | boolean) => {\r\n        const copyOfNewTaskFields: NewTask = {...newTaskFields};\r\n        copyOfNewTaskFields[fieldName] = input;\r\n        setNewTaskFields(copyOfNewTaskFields)\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        const currentDate = moment().utcOffset(0).format();\r\n        const objectToSubmit: TaskItem = {\r\n            title: newTaskFields.title,\r\n            done: newTaskFields.done,\r\n            date: currentDate,\r\n            modified: currentDate\r\n        };\r\n        dispatch(createTask(objectToSubmit));\r\n    }\r\n\r\n    return props.isOpen ?\r\n        <div className={classNames(\"container-fluid card mb-3 mt-3\", styles.container)}>\r\n            <div className={styles.textAreaContainer}>\r\n                <div className=\"form\">\r\n                    <h4 className=\"form-label\">Create Task</h4>\r\n                    <textarea value={newTaskFields.title}\r\n                              placeholder=\"Write your task here\"\r\n                              onChange={e => handleNewTaskFieldsInputs(\"title\", e.target.value)}\r\n                              className=\"form-control\" id=\"title\"/>\r\n\r\n                </div>\r\n                <div className={styles.doneCheckBox}>\r\n                    <input\r\n                        checked={newTaskFields.done}\r\n                        onChange={() => handleNewTaskFieldsInputs(\"done\", !newTaskFields.done)}\r\n                        type={\"checkbox\"}\r\n                        className=\"m-1\"\r\n                        id=\"exampleCheck1\"/>\r\n                    <label className=\"form-check-label\" htmlFor=\"exampleCheck1\">Done</label>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <button onClick={() => handleSubmit()} className=\"btn-sm btn-primary m-3\">Submit</button>\r\n            </div>\r\n        </div> : <div/>;\r\n}\r\n","import React, {useState} from 'react';\r\nimport {TaskItem} from \"../../todoInterfaces\";\r\nimport moment from \"moment-timezone\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {deleteTask, updateTask} from \"../../todoListSlice\";\r\nimport * as _ from 'lodash';\r\nimport styles from './todoItem.module.css';\r\nimport classNames from 'classnames'\r\n\r\n\r\nexport interface TodoItemProps {\r\n    taskItem: TaskItem;\r\n    classname?: string;\r\n}\r\n\r\nexport const TodoItem = (props: TodoItemProps) => {\r\n    const taskItem = props.taskItem;\r\n    const dispatch = useDispatch();\r\n    const [editObject, setEditObject] = useState<TaskItem>(taskItem);\r\n\r\n\r\n    const handleUpdate = (field, value) => {\r\n        const copyOfEditObj: TaskItem = {...taskItem};\r\n        copyOfEditObj[field] = value;\r\n        copyOfEditObj.modified = moment().utcOffset(0).format();\r\n        dispatch(updateTask(copyOfEditObj))\r\n    }\r\n\r\n    const handleTextEdit = (text) => {\r\n        const copyOfEditObject = {...editObject, \"title\": text};\r\n        setEditObject(copyOfEditObject);\r\n    }\r\n\r\n    const getTimeDisplayFormat = (time: string) => {\r\n        return moment(time).tz(moment.tz.guess()).format(\"HH:mm DD/MM/yyyy\")\r\n    };\r\n\r\n    const submitDisabled: boolean = (_.isEqual(editObject.title, taskItem.title));\r\n\r\n    const getEditTextAreaElement = (): JSX.Element => {\r\n        return <div className=\"card-body\">\r\n                    <textarea value={editObject.title}\r\n                              onChange={(e) => handleTextEdit(e.target.value)}\r\n                              className=\"form-control mb-2\"\r\n                              id=\"exampleFormControlTextarea1\"\r\n                              rows={3}/>\r\n            {\r\n                <button disabled={submitDisabled}\r\n                        title={submitDisabled ? \"There are no changes to submit\" : \"Submit the edition of this task\"}\r\n                        onClick={() => handleUpdate(\"title\", editObject.title)}\r\n                        className={submitDisabled ? \"m-2 disabled\" : \"btn-sm btn-success m-2\"}>\r\n                    Edit Task\r\n                </button>}\r\n        </div>\r\n    }\r\n\r\n\r\n    const getDoneCheckBoxElement = (): JSX.Element => {\r\n        return <div className={styles.doneCheckBox}>\r\n            <input\r\n                checked={taskItem.done}\r\n                onChange={() => handleUpdate(\"done\", !taskItem.done)}\r\n                type={\"checkbox\"}\r\n                className=\"m-1\"\r\n                id=\"exampleCheck1\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"exampleCheck1\">Done</label>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className={classNames(\"card text-center \", props.classname, styles.backgroundTaskItem)} >\r\n            <div className=\"card-header text-muted\">\r\n                Created : {getTimeDisplayFormat(taskItem.date)}\r\n            </div>\r\n            <div className=\"card-header text-muted\">\r\n                Last Modified : {getTimeDisplayFormat(taskItem.modified)}\r\n            </div>\r\n            {getEditTextAreaElement()}\r\n            <div className={styles.doneAndDeleteContainer} >\r\n                {getDoneCheckBoxElement()}\r\n                <button onClick={() => dispatch(deleteTask(taskItem.id || \"\"))} className=\"btn-sm btn-danger m-2\">\r\n                    Delete\r\n                </button>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {selectUser, signOut} from \"../../login/loginSlice\";\r\nimport {deleteAllTasks, fetchAllTasks, selectTaskMap} from \"../todoListSlice\";\r\nimport * as _ from 'lodash'\r\nimport {CreateNewTask} from \"./createNewTask/CreateNewTask\";\r\nimport {TaskItem, TaskMap} from \"../todoInterfaces\";\r\nimport {TodoItem} from \"./todoItem/TodoItem\";\r\nimport {User} from \"../../login/loginIntefaces\";\r\nimport styles from './todoList.module.css'\r\n\r\nimport {Button, Menu, MenuItem, Popover, Position, Radio, RadioGroup} from \"@blueprintjs/core\";\r\n\r\n\r\ntype Orders = \"asc\" | \"desc\";\r\n\r\nconst prettySortNames = {\r\n    date: \"Creation Date\",\r\n    modified: \"Modification Date\"\r\n}\r\n\r\ntype OrderBy = {\r\n    field: OrderField,\r\n    order: Order\r\n}\r\n\r\ntype OrderField = \"date\" | \"modify\"\r\n\r\ntype Order = \"asc\" | \"desc\";\r\n\r\nexport const TodoList = (props) => {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const taskMap: TaskMap = useSelector(selectTaskMap)\r\n    const user: User = useSelector(selectUser)\r\n    const [orderBy, setOrderBy] = useState<OrderBy>({field: 'date', order: \"desc\"});\r\n    const [isCreatingNewTask, setIsCreatingNewTask] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!_.isEmpty(user)) {\r\n            dispatch(fetchAllTasks());\r\n        }\r\n    }, [user])\r\n\r\n    useEffect(() => {\r\n        setIsCreatingNewTask(false);\r\n    }, [taskMap])\r\n\r\n    const handleSignOut = () => {\r\n        dispatch(signOut());\r\n    }\r\n\r\n    const handleDeleteAll = () => {\r\n        dispatch(deleteAllTasks());\r\n    }\r\n\r\n    const getSortedTodoList = (field: OrderField, order: Orders): TaskItem[] => {\r\n        return _.orderBy(taskMap, [field], [order]);\r\n    }\r\n\r\n\r\n    const getSortDropDown = () => {\r\n        const handleOrderChange = (key, value) => {\r\n            const copyOfOrderBy = {...orderBy, [key]: value}\r\n            setOrderBy(copyOfOrderBy);\r\n        }\r\n\r\n        return <div className={styles.sortDropDownContainer}>\r\n            <Popover content={\r\n                <Menu>\r\n                    <MenuItem onClick={() => handleOrderChange(\"field\", \"modified\")} text={prettySortNames.modified}/>\r\n                    <MenuItem onClick={() => handleOrderChange(\"field\", \"date\")} text={prettySortNames.date}/>\r\n                </Menu>\r\n            }\r\n                     position={Position.RIGHT_TOP}>\r\n                <Button className={styles.sortByFieldButton}  icon=\"share\" text={\"Sorting by \" + prettySortNames[orderBy.field]}/>\r\n            </Popover>\r\n\r\n            <RadioGroup\r\n                className=\"m-2 ml-3\"\r\n                inline={true}\r\n                onChange={(e: any) => handleOrderChange(\"order\", e.target.value)}\r\n                selectedValue={orderBy.order}\r\n            >\r\n                <Radio label=\"Desc\" value=\"desc\"/>\r\n                <Radio className={styles.marginRight7} label=\"Asc\" value=\"asc\"/>\r\n            </RadioGroup>\r\n\r\n        </div>\r\n    }\r\n\r\n\r\n    const getNavBar = () => {\r\n        return <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <div className=\"container-fluid\">\r\n\r\n                <button onClick={() => handleSignOut()} className=\"btn-sm btn-info m-3\">Sign Out</button>\r\n                <button onClick={() => setIsCreatingNewTask(!isCreatingNewTask)}\r\n                        className=\"btn-sm btn-success m-3\">Create New Task\r\n                </button>\r\n                <button onClick={() => handleDeleteAll()} className=\"btn-sm btn-danger m-3\">Delete All Tasks\r\n                </button>\r\n                {getSortDropDown()}\r\n            </div>\r\n        </nav>\r\n    }\r\n\r\n    return (\r\n        <div className=\"bg-light\">\r\n            {getNavBar()}\r\n            <CreateNewTask isOpen={isCreatingNewTask}/>\r\n            <h1>Tasks</h1>\r\n            {\r\n                _.map(getSortedTodoList(orderBy.field, orderBy.order), task => {\r\n                    return <TodoItem classname=\"mt-4\" key={task.id} taskItem={task}/>\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n","import './App.css';\r\nimport React, {useEffect} from 'react';\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {Login} from \"./features/login/components/Login\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport {history} from './helpers/history';\r\nimport {TodoList} from \"./features/todo/components/TodoList\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectUser} from \"./features/login/loginSlice\";\r\nimport {User} from \"./features/login/loginIntefaces\";\r\n\r\n\r\nexport const BASE_UI_URL = \"http://\" + window.location.host;\r\nexport const BASE_BACKEND_URL = \"http://localhost:8080\";\r\nexport const LOGIN_BASE_URL = BASE_BACKEND_URL + \"/api/v1/auth\";\r\nexport const TODO_BASE_URL = BASE_BACKEND_URL + \"/api/v1/todoTasks\";\r\n\r\n\r\n\r\nconst App = props => {\r\n\r\n    const user: User = useSelector(selectUser);\r\n\r\n    useEffect(() => {\r\n        if (user.accessToken) {\r\n            const urlHome = new URL(BASE_UI_URL + \"/todolist\");\r\n            history.push(urlHome.pathname)\r\n        } else {\r\n            const urlLogin = new URL(BASE_UI_URL + \"/login\");\r\n            history.push(urlLogin.pathname)\r\n        }\r\n\r\n    }, [user])\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"container-fluid w-50\">\r\n                <Switch>\r\n                    <Route user={user} exact path={[\"/\", \"/todolist\"]} component={TodoList}/>\r\n                    <Route exact path=\"/login\" component={Login}/>\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {configureStore} from '@reduxjs/toolkit';\r\nimport {todoListSlice} from '../features/todo/todoListSlice';\r\nimport {loginSlice} from \"../features/login/loginSlice\";\r\nimport {LoginState, User} from \"../features/login/loginIntefaces\";\r\nimport {TodoState} from \"../features/todo/todoInterfaces\";\r\n\r\n\r\nconst reducer = {\r\n    login: loginSlice.reducer,\r\n    todo: todoListSlice.reducer\r\n}\r\n\r\nexport interface FullState {\r\n    login: LoginState,\r\n    todo: TodoState\r\n}\r\n\r\n\r\nconst getUserFromStorage = (): User => {\r\n   return JSON.parse(localStorage.getItem(\"user\") || \"{}\");\r\n}\r\n\r\nconst preloadedState: Partial<FullState> = {\r\n   login: {\r\n    serverSideErrorMessage: \"\",\r\n    user: getUserFromStorage()\r\n   }\r\n}\r\n\r\n\r\nexport default configureStore({\r\n        reducer,\r\n        preloadedState\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" ServerSideError.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.isError('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Router} from \"react-router-dom\";\r\nimport {history} from \"./helpers/history\";\r\nimport \"normalize.css\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\n\r\n\r\n\r\nReactDOM.render(\r\n        <Router history={history}>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </Router>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"signInUpContainer\":\"login_signInUpContainer__36uJf\",\"errorMessage\":\"login_errorMessage__1gjBG\",\"loginContainer\":\"login_loginContainer__Rhahw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"createNewTask_container__1slFb\",\"textAreaContainer\":\"createNewTask_textAreaContainer__2g0JJ\",\"doneCheckBox\":\"createNewTask_doneCheckBox__25o7q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"doneAndDeleteContainer\":\"todoItem_doneAndDeleteContainer__3x_WF\",\"backgroundTaskItem\":\"todoItem_backgroundTaskItem__2vZ_S\",\"doneCheckBox\":\"todoItem_doneCheckBox__2xzQ1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sortDropDownContainer\":\"todoList_sortDropDownContainer__2ydh0\",\"sortByFieldButton\":\"todoList_sortByFieldButton__137gC\",\"marginRight7\":\"todoList_marginRight7__3m1TA\"};"],"sourceRoot":""}